function path = A_star_search(map, MAX_X, MAX_Y)
%%
    nodeVisited = 0;
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map, 1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP = 2 * (ones(MAX_X, MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget = xval;
    yTarget = yval;
    MAP(xval, yval) = 0;
    
    %Initialize MAP with location of the obstacle
    for i = 2 : size_map - 1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval) = -1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval, yval) = 1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k = 1;%Dummy counter
    for i=1 : MAX_X
        for j = 1 : MAX_Y
            if(MAP(i, j) == -1)
                CLOSED(k, 1) = i;
                CLOSED(k, 2) = j;
                k = k + 1;
            end
        end
    end
    CLOSED_COUNT = size(CLOSED, 1);
    %set the starting node as the first node
    xNode = xval;
    yNode = yval;
    OPEN_COUNT = 1;
    goal_distance = distance(xNode, yNode, xTarget, yTarget, "DiagonalHeu");
    path_cost = 0;
    OPEN(OPEN_COUNT, :) = insert_open(xNode, yNode, xNode, yNode, goal_distance, path_cost, goal_distance);
%     OPEN(OPEN_COUNT, 1) = 0;
%     CLOSED_COUNT = CLOSED_COUNT + 1;
%     CLOSED(CLOSED_COUNT, 1) = xNode;
%     CLOSED(CLOSED_COUNT, 2) = yNode;
    NoPath = 1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while(1) %you have to dicide the Conditions for while loop exit 
        nodeVisited = nodeVisited + 1;
     %
     %finish the while loop
     %
        if(sum(OPEN(:, 1)) == 0 || (OPEN(OPEN_COUNT, 2) == xTarget && OPEN(OPEN_COUNT, 3) == yTarget))
            break;
        end
        currentNode = min_fn(OPEN, OPEN_COUNT, xTarget, yTarget);
        
        node_x = OPEN(currentNode, 2);%获取当前节点的x
        node_y = OPEN(currentNode, 3);%获取当前节点的y
        gn = OPEN(currentNode, 7);%获取当前节点的g
        
        OPEN(currentNode, 1) = 0;%使用完当前节点后标记为从优先级队列中弹出
        CLOSED_COUNT = CLOSED_COUNT + 1;%将当前节点加入CLOSED
        CLOSED(CLOSED_COUNT, 1) = node_x;%记录当前节点的x
        CLOSED(CLOSED_COUNT, 2) = node_y;%记录当前节点的y

        neighbors = expand_array(node_x, node_y, gn, xTarget, yTarget, CLOSED, MAX_X, MAX_Y);%扩展，获取当前节点的邻居节点

        for i = 1 : size(neighbors, 1)
            x = neighbors(i, 1);
            y = neighbors(i, 2);
            hn = neighbors(i, 3);
            gn = neighbors(i, 4);
            fn = neighbors(i, 5);
            if(x == xTarget && y == yTarget)
                NoPath = 0;
                OPEN_COUNT = OPEN_COUNT + 1;
                OPEN(OPEN_COUNT, :) = insert_open(x, y, node_x, node_y, hn, gn, fn);
                break;
            end
            idx = getIndex(OPEN, x, y);
            if(idx > OPEN_COUNT)%如果当前的节点不在OPEN列表中
                OPEN_COUNT = OPEN_COUNT + 1;
                OPEN(OPEN_COUNT, :) = insert_open(x, y, node_x, node_y, hn, gn, fn);%则加入OPEN列表
            else%如果当前节点在OPEN列表中，但是fn值大于当前路径的fn，更新父节点、g和f值
                if(OPEN(idx, 8) > fn)
                    OPEN(idx, 4) = node_x;
                    OPEN(idx, 5) = node_y;
                    OPEN(idx, 7) = gn;
                    OPEN(idx, 8) = fn;
                end
            end
        end
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   path = [];
   if(NoPath)
       return;
   else
       n = 1;
       path(n, :) = [xTarget, yTarget];
       index = OPEN_COUNT;
       while(index > 1)
           x = OPEN(index, 4);
           y = OPEN(index, 5);
           index = getIndex(OPEN, x, y);
           n = n + 1;
           path(n, :) = [x, y];%通过OPEN中记录的各个节点的父节点进行回溯，获得path
       end
   end
   path(n + 1, :) = [xStart, yStart];
   path = flip(path);
   
   str = sprintf("访问的总节点数为%d\n", nodeVisited);
   disp("DiagonalHeu启发函数" + str);
end
